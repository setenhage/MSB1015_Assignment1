<html>
<head>
<!-- Initialize a global WBK function -->
<script src="https://cdn.rawgit.com/maxlath/wikidata-sdk/dist/dist/wikibase-sdk.min.js"></script>
<!-- Initialize a global wdk object using the WBK object -->
<script src="https://cdn.rawgit.com/maxlath/wikidata-sdk/dist/dist/wikidata-sdk.min.js"></script>
<!-- D3 Visualization library -->
<script src="https://d3js.org/d3.v4.min.js"></script> 
</head>

<h1> Drugs targetting genes associated with Rheumatoid Arthritis </h1>
<p> MSB1015 Assignment 1 - Suzanne ten Hage </p>
<p> In this assignment I use a query (in SPARQL) to obtain all drugs that target genes associated with
	Rheumatoid Arthritis from the WikiData database. To visualize the results, I use both an html table
	(first) and a tree (second). </p> 

<body>
  <pre id="output"></pre>
  
  <div id="chart"></div>
	
  <script>
	// We use a query (in SPARQL) to obtain all drugs that target genes associated with Rheumatoid Arthritis
	// from WikiData. 
    query = `SELECT ?drugLabel ?geneLabel ?diseaseLabel
		WHERE {?disease wdt:P279* wd:Q187255. 		#Select Rheumatoid Arthritis as disease of interest.
			?disease  wdt:P2293 ?gene. 				#Select all genes associated with Rheumatoid Arthritis.
			?gene wdt:P688 ?gene_product. 			#Find all gene products associated with those genes. 
			?drug wdt:P129 ?gene_product. 			#Find all drugs targetting those gene products. 
			SERVICE wikibase:label { bd:serviceParam wikibase:language '[AUTO_LANGUAGE],en'. }
		}`
    
	// "fetch" the results from the query from the database. The results are stored in 'data'. 
    fetch(
		wdk.sparqlQuery(query)
	).then( response => response.json()
	).then( wdk.simplify.sparqlResults
    ).then(
		// Visualization of the obtained data using a html table and a tree. 
		function (response) {
			data= response;
			
			//Create html table.
			var html = "<table>";
			html += "<tr>";
			html += "<td>Gene</td>";
			html += "<td>Drug</td>";
			html += "</tr>";
			
			for(var i=0; i< response.length;i++) {
				html += "<tr>";
				html += "<td>"+response[i].geneLabel+"</td>";
				html += "<td>"+response[i].drugLabel+"</td>";
				html += "</tr>";
			}
			
			html += "</table>"
			document.getElementById('output').innerHTML = html; 
			tree = d3.nest()
				.key(function(d) { return d.geneLabel; })
				.key(function(d) { return d.drugLabel; })
				.entries(data);
			
			// Create tree. 
			packableTree = {key: data[0].diseaseLabel, values: tree};

			root = d3.hierarchy(packableTree, d => d.values).sum(() => 1)

			var depthScale = d3.scaleOrdinal()
				.range(["#5EAFC6", "#FE9922", "#93c464", "#75739F"])

			var dimension = 900;
		
			var treeChart = d3.tree();
			treeChart.size([dimension,dimension])

			treeData = treeChart(root).descendants()

			// Create main SVG canvas and initialize a group element for each node in the tree.
			d3.select("#chart").append("svg")
					.attr('width', dimension)
					.attr('height', dimension)
					.attr('transform', 'translate(0,0)')
					.append("g")
					.attr("id", "treeG")
					.attr("transform", "translate(10,5)")
					.selectAll("g")
					.data(treeData)
					.enter()
					.append("g")
					.attr("class", d => d.depth < 2  ? "vnode" : "lnode")
					.attr("transform", d => `translate(${d.y},${d.x})`)

			// Create a circle element for each node in the tree with a color based on the depth.
			d3.selectAll("g[class*='node']")
					.append("circle")
					.attr("r", 10)
					.style("fill", d => depthScale(d.depth))
					.style("stroke", "white")
					.style("stroke-width", "2px");

			// Add text to the nodes of depth less than 2.
			d3.selectAll("g.vnode")
					.append("text")
					.text(d => d.data.key)
					.attr("transform", d => `translate(-5,-10)`)

			// Add text to the nodes of depth 2.
			d3.selectAll("g.lnode")
					.append("text")
					.text(d => d.data.key)
					.attr("transform", d => `translate(10,0)`)
					
			// Draw the lines between the nodes.
			d3.select("#treeG").selectAll("line")
					.data(treeData.filter(function(d) { if( d.depth < 3) return d.parent }))
					.enter().insert("line","g.vnode")
					.attr("x1", d => d.parent.y)
					.attr("y1", d => d.parent.x)
					.attr("x2", d => d.y)
					.attr("y2", d => d.x)
					.style("stroke", "black")
		}
    )
  </script>
</body>

</html>
